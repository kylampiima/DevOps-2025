trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: DevOp  

steps:
# Step 1: Format code before building
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'io.spring.javaformat:spring-javaformat-maven-plugin:0.0.27:apply'
    options: '-DskipTests'  # Skip tests during formatting

# Step 2: Set up Maven and run tests with SonarQube analysis
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: true
    sqMavenPluginVersionChoice: '5.1.0.4751'  # Use a specific version of the SonarQube plugin
    options: '-Dsonar.token=$(SONAR_TOKEN)'  # Pass the token as an option

# Step 3: Publish test results
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    testRunTitle: 'Tests for Petclinic'

# Step 4: Authenticate Docker with Heroku
- script: |
    echo "Logging in to Docker and Heroku..."
    echo $(HEROKU_API_KEY) | docker login --username=_ --password-stdin registry.heroku.com
  displayName: 'Login to Docker and Heroku'

# Step 5: Build and Push Docker Image
- script: |
    echo "Building Docker image..."
    docker buildx build --provenance=false -t registry.heroku.com/devops2025/web .
    echo "Pushing Docker image to Heroku..."
    docker push registry.heroku.com/devops2025/web
  displayName: 'Build and Push Docker Image'

# Step 6: Release Docker Image on Heroku
- script: |
    echo "Releasing Docker image on Heroku..."
    heroku container:release web --app devops2025
  displayName: 'Release Docker Image on Heroku'

# Step 7: Verify Deployment
- script: echo "Deployment complete. Verify at https://devops2025.herokuapp.com"
  displayName: 'Deployment Verification'

