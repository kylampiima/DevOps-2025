trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: DevOp  # Contains DOCKERHUB_USERNAME, DOCKERHUB_PASSWORD, RENDER_API_KEY, RENDER_SERVICE_ID

steps:

# Step 1: Cache Render CLI
- task: Cache@2
  inputs:
    key: render-cli-linux
    path: $(Pipeline.Workspace)/render-cli
  displayName: 'Cache Render CLI Binary'

# Step 2: Install Render CLI (with cache support)
- script: |
    CLI_DIR="$(Pipeline.Workspace)/render-cli"
    mkdir -p $CLI_DIR
    cd $CLI_DIR

    if [ ! -f render ]; then
      echo "Downloading Render CLI binary..."
      curl -L -o render https://github.com/render/render-cli/releases/latest/download/render-linux-amd64

      echo "Making Render CLI executable..."
      chmod +x render
    else
      echo "Using cached Render CLI"
    fi

    echo "Copying Render CLI to /usr/local/bin..."
    sudo cp render /usr/local/bin/render

    echo "Checking Render CLI version..."
    render --version
  displayName: 'Install Render CLI (Cached)'

# Step 3: Format Code with Maven Plugin
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'io.spring.javaformat:spring-javaformat-maven-plugin:0.0.27:apply'
    options: '-DskipTests'
  displayName: 'Format Code with Maven'

# Step 4: Run Tests and SonarQube Analysis
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    sonarQubeRunAnalysis: true
    sqMavenPluginVersionChoice: '5.1.0.4751'
    options: '-Dsonar.token=$(SONAR_TOKEN)'
  displayName: 'Run Tests & SonarQube Analysis'

# Step 5: Publish Test Results
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    testRunTitle: 'Tests for Petclinic'
  displayName: 'Publish Test Results'

# Step 6: Authenticate with Docker Hub
- script: |
    echo "Logging in to Docker Hub..."
    echo $(DOCKERHUB_PASSWORD) | docker login --username $(DOCKERHUB_USERNAME) --password-stdin
  displayName: 'Login to Docker Hub'

# Step 7: Build and Push Docker Image
- script: |
    IMAGE_NAME=$(DOCKERHUB_USERNAME)/petclinic-app2:latest
    echo "Building Docker image: $IMAGE_NAME"
    docker buildx build --provenance=false -t $IMAGE_NAME .

    echo "Pushing Docker image to Docker Hub..."
    docker push $IMAGE_NAME
  displayName: 'Build & Push Docker Image'

# Step 8: Trigger Render Deployment
- script: |
    echo "Triggering deployment on Render..."
    render deploys create $(RENDER_SERVICE_ID) \
      --image $(DOCKERHUB_USERNAME)/petclinic-app2:latest \
      --wait
    echo "Deployment triggered successfully!"
  displayName: 'Trigger Deployment on Render'

# Step 9: Verify Render Deployment Status
- script: |
    echo "Checking deployment status on Render..."
    curl -X GET \
      https://api.render.com/v1/services/$(RENDER_SERVICE_ID) \
      -H "Authorization: Bearer $(RENDER_API_KEY)"
    echo "Visit your Render dashboard for deployment status."
  displayName: 'Verify Render Deployment'
